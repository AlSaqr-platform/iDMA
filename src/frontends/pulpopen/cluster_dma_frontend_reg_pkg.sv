// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package cluster_dma_frontend_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } cluster_dma_frontend_reg2hw_src_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cluster_dma_frontend_reg2hw_dst_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cluster_dma_frontend_reg2hw_num_bytes_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } decouple;
    struct packed {
      logic        q;
    } deburst;
    struct packed {
      logic        q;
    } serialize;
  } cluster_dma_frontend_reg2hw_conf_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } cluster_dma_frontend_reg2hw_next_id_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } cluster_dma_frontend_reg2hw_done_reg_t;

  typedef struct packed {
    logic        d;
  } cluster_dma_frontend_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } cluster_dma_frontend_hw2reg_next_id_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } cluster_dma_frontend_hw2reg_done_reg_t;

  // Register -> HW type
  typedef struct packed {
    cluster_dma_frontend_reg2hw_src_addr_reg_t src_addr; // [164:133]
    cluster_dma_frontend_reg2hw_dst_addr_reg_t dst_addr; // [132:101]
    cluster_dma_frontend_reg2hw_num_bytes_reg_t num_bytes; // [100:69]
    cluster_dma_frontend_reg2hw_conf_reg_t conf; // [68:66]
    cluster_dma_frontend_reg2hw_next_id_reg_t next_id; // [65:33]
    cluster_dma_frontend_reg2hw_done_reg_t done; // [32:0]
  } cluster_dma_frontend_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    cluster_dma_frontend_hw2reg_status_reg_t status; // [64:64]
    cluster_dma_frontend_hw2reg_next_id_reg_t next_id; // [63:32]
    cluster_dma_frontend_hw2reg_done_reg_t done; // [31:0]
  } cluster_dma_frontend_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_SRC_ADDR_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_DST_ADDR_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_NUM_BYTES_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_CONF_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_STATUS_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_NEXT_ID_OFFSET = 5'h 14;
  parameter logic [BlockAw-1:0] CLUSTER_DMA_FRONTEND_DONE_OFFSET = 5'h 18;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] CLUSTER_DMA_FRONTEND_STATUS_RESVAL = 1'h 0;
  parameter logic [31:0] CLUSTER_DMA_FRONTEND_NEXT_ID_RESVAL = 32'h 0;
  parameter logic [31:0] CLUSTER_DMA_FRONTEND_DONE_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    CLUSTER_DMA_FRONTEND_SRC_ADDR,
    CLUSTER_DMA_FRONTEND_DST_ADDR,
    CLUSTER_DMA_FRONTEND_NUM_BYTES,
    CLUSTER_DMA_FRONTEND_CONF,
    CLUSTER_DMA_FRONTEND_STATUS,
    CLUSTER_DMA_FRONTEND_NEXT_ID,
    CLUSTER_DMA_FRONTEND_DONE
  } cluster_dma_frontend_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CLUSTER_DMA_FRONTEND_PERMIT [7] = '{
    4'b 1111, // index[0] CLUSTER_DMA_FRONTEND_SRC_ADDR
    4'b 1111, // index[1] CLUSTER_DMA_FRONTEND_DST_ADDR
    4'b 1111, // index[2] CLUSTER_DMA_FRONTEND_NUM_BYTES
    4'b 0001, // index[3] CLUSTER_DMA_FRONTEND_CONF
    4'b 0001, // index[4] CLUSTER_DMA_FRONTEND_STATUS
    4'b 1111, // index[5] CLUSTER_DMA_FRONTEND_NEXT_ID
    4'b 1111  // index[6] CLUSTER_DMA_FRONTEND_DONE
  };

endpackage

